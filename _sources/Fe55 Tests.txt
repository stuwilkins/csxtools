
Single Photon Counting with FastCCD
===================================

First some imports

.. code:: python

    import numpy as np
    import tifffile
    
    %matplotlib inline
    from matplotlib import pyplot as plt
    plt.style.use('sbwnotebook')
    
    from csxtools.fastccd import phocount
    import timeit

Using test data from:
``/GPFS/xf23id/xf23id1/LBNL_Test_Data/20140410/Fe55-Exp100us-HC5837/bnl2_20140410_normalizedTiffs``

.. code:: python

    data = []
    for x in range(1,661):
        tf = tifffile.TiffFile('/GPFS/xf23id/xf23id1/LBNL_Test_Data/20140410/Fe55-Exp100us-HC5837/bnl2_20140410_normalizedTiffs/image{}.tiff'.format(x))
        data.append(tf.pages[0].asarray())
    data = np.array(data)
    print(data.shape)


.. parsed-literal::

    (660, 478, 960)


Check the data
--------------

.. code:: python

    plt.figure()
    plt.imshow(data[1], vmin=0, vmax=300, interpolation='none')
    plt.xlabel('Columns')
    plt.ylabel('Rows')




.. parsed-literal::

    <matplotlib.text.Text at 0x7f27f1752048>




.. image:: Fe55%20Tests_files/Fe55%20Tests_5_1.png


.. code:: python

    t = timeit.timeit('phocount.photon_count(data, (70,250), 3)', globals=globals(), number=1)
    print("Photon counting array of {} takes {} seconds".format(data.shape, t / 1))

Run a loop to generate data for diferent ESUM
---------------------------------------------

.. code:: python

    results = []
    histograms = []
    
    for n in range(1, 9):
        c = phocount.photon_count(data, (50,250), n)
        h = np.histogram(c[0], bins=100, range=(50, 350))
        results.append(c[0].ravel())
        histograms.append(h[0]) 
        
    hist_x = h[1][:-1]
    results = np.array(results) 

.. code:: python

    color=iter(plt.cm.rainbow(np.linspace(0,1,9)))
    plt.figure()
    for x,h in enumerate(histograms):
        plt.plot(hist_x, h, 'o-', c=next(color), label='{}'.format(x))
    plt.legend()




.. parsed-literal::

    <matplotlib.legend.Legend at 0x7f27f05fcef0>




.. image:: Fe55%20Tests_files/Fe55%20Tests_9_1.png



.. code:: python

    plt.figure()
    ca[0][ca[0] == 0] = np.nan
    plt.imshow(np.nanmean(ca[0], axis=0), vmin=100, vmax=300, interpolation='none', cmap='CMRmap')
    plt.colorbar()

.. code:: python

    plt.figure()
    ca[1][ca[1] == 0] = np.nan
    plt.imshow(np.nanmean(ca[1], axis=0), vmin=20, vmax=60, interpolation='none', cmap='CMRmap')
    plt.colorbar()

.. code:: python

    plt.figure()
    plt.hist(ca[0].ravel(), bins=100, range=(40,400))

